insert보다 append.
맨 뒤 삽입/삭제는 append = deque
하지만 맨 앞 삽입/삭제는 deque. but deque는 인덱싱.슬라이싱이 불가능하다는것
</br>
그래프 알고리즘은 tuple
</br>
우선순위 큐도 tuple
</br>
```python
#제외 시키기
a=[1,2,3,4,5,5,5]
remove_set={3,5}

[i for i in a if i not in remove_set]
```

```python3
#입력 (문자열로 받기 때문에 int로 숫자로 바꿔준다.)
list(map(int,input.split()))

#입력 갯수가 많을 때
import sys
data = sys.stdin.readline().rstrip()
print(data)
```

----

### itertools
```python3
from itertools import permutations
data = ['a','b','c']
result = list(permutations(data,3))

from itertools import combinations
result = list(combinations(data),3)

from itertools import product  #카테시안곱
result = list(product(data,reapeat=2))

from itertools import combinations_withreplacement #중복허용 조합
result = list(combinations_withreplacement(data,2))
```

----

### headq
```python3
import headq

def heapsort(iterable):
  h=[]
  result=[]
  
  for value in iterable:
    #최소힙
    heapq.heappush(h,value)
    
    #최대힙
    #heapq.heappush(h,-value)
    
  for i in range(len(h)):
    result.append(heapq.heappop(h))
  return result
  
result = heapsort([1,3,5,7,9,2,4,6,8,0])
print(result)

```


### bisect 이진탐색
```
정렬된 배열에서 특정한 원소를 찾아야 할 대 매우 효과적이다.
bisect_left(a,x)
bisect_right(a,x)
 정렬된 순서를 유지하면서 리스트 a에 데이터 x를 삽입할 가장 왼(오른)쪽 인덱스를 찾는 메서드
```

```python
from bisect import bisect_left,bisect_right
a=[1,2,4,4,8]
x=4

print(bisect_left(a,x))
print(bisect_right(a,x))
```


### collections
deque
 -appendleft / append
 -popleft / pop

```python3
from collections import deque
data = deque([2,3,4])
data.appendleft(1)
data.append(5)
```

### math
```python3
math.factorial(n)

#최대공약수
math.gcd(21,14)

math.pi
math.e
```
 
